{
	"scopeName": "description.ext",
	"fileTypes": ["ext"],
	"name": "ext",
	"patterns": [
		{ "include": "#strings" },
		{ "include": "#numbers" },
		{
			"name": "storage.type",
			"match": "\\b(class)\\b"
		},
		{
			"begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.$3.ext"
				},
				"2": {
					"name": "punctuation.definition.directive.ext"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.include.ext",
			"patterns": [
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ext"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ext"
						}
					},
					"name": "string.quoted.double.include.ext"
				},
				{
					"begin": "<",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ext"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ext"
						}
					},
					"name": "string.quoted.other.lt-gt.include.ext"
				}
			]
		},
		{
			"begin": "(?x)\n^\\s* ((\\#)\\s*define) \\s+    # define\n((?<id>[a-zA-Z_$][\\w$]*))      # macro name\n(?:\n  (\\()\n    (\n      \\s* \\g<id> \\s*         # first argument\n      ((,) \\s* \\g<id> \\s*)*  # additional arguments\n      (?:\\.\\.\\.)?            # varargs ellipsis?\n    )\n  (\\))\n)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.define.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				},
				"3": {
					"name": "entity.name.function.preprocessor.c"
				},
				"5": {
					"name": "punctuation.definition.parameters.begin.c"
				},
				"6": {
					"name": "variable.parameter.preprocessor.c"
				},
				"8": {
					"name": "punctuation.separator.parameters.c"
				},
				"9": {
					"name": "punctuation.definition.parameters.end.c"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.macro.ext"
		}
	],
	"repository": {
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.c"
						}
					}
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F']*[0-9a-fA-F])?)|(0(b|B)[01]([01']*[01])?)|(([0-9]([0-9']*[0-9])?\\.?[0-9]*([0-9']*[0-9])?)|(\\.[0-9]([0-9']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
					"name": "constant.numeric.ext"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "(u|u8|U|L)?\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ext"
						},
						"1": {
							"name": "meta.encoding.ext"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ext"
						}
					},
					"name": "string.quoted.double.ext",
					"patterns": [
						{
							"match": "\\\\u\\h{4}|\\\\U\\h{8}",
							"name": "constant.character.escape.ext"
						},
						{
							"match": "\\\\['\"?\\\\abfnrtv]",
							"name": "constant.character.escape.ext"
						},
						{
							"match": "\\\\[0-7]{1,3}",
							"name": "constant.character.escape.ext"
						},
						{
							"match": "\\\\x\\h+",
							"name": "constant.character.escape.ext"
						}
					]
				},
				{
					"begin": "(u|u8|U|L)?R\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ext"
						},
						"1": {
							"name": "meta.encoding.ext"
						},
						"3": {
							"name": "invalid.illegal.delimiter-too-long.ext"
						}
					},
					"end": "\\)\\2(\\3)\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ext"
						},
						"1": {
							"name": "invalid.illegal.delimiter-too-long.ext"
						}
					},
					"name": "string.quoted.double.raw.ext"
				}
			]
		} 
	}
}